local Fluent = loadstring(game:HttpGet("https://raw.githubusercontent.com/NovaHubOnTop/Private/refs/heads/main/Library"))()
local SaveManager = loadstring(game:HttpGet("https://raw.githubusercontent.com/dawid-scripts/Fluent/master/Addons/SaveManager.lua"))()
local InterfaceManager = loadstring(game:HttpGet("https://raw.githubusercontent.com/dawid-scripts/Fluent/master/Addons/InterfaceManager.lua"))()

local Window = Fluent:CreateWindow({
    Title = "Nova Hub" .. Fluent.Version,
    SubTitle = "by Encrypted",
    TabWidth = 160,
    Size = UDim2.fromOffset(580, 460),
    Acrylic = true, -- The blur may be detectable, setting this to false disables blur entirely
    Theme = "SpeedHubX",
    MinimizeKey = Enum.KeyCode.LeftControl -- Used when theres no MinimizeKeybind
})

local Tabs = {
    Client = Window:AddTab({ Title = "Client", Icon = "" }),
    AutoFarm = Window:AddTab({ Title = "Auto Farm", Icon = "settings" })
}

Tabs.Client:AddParagraph({
        Title = "Local Player",
        Content = ""
    })

-- Hide Pet Button
Tabs.Client:AddButton({
        Title = "Hide Pet",
        Description = "Hide your pet.",
        Callback = function()
            local args = {
                [1] = "hidePets"
            }
            game:GetService("ReplicatedStorage"):WaitForChild("rEvents"):WaitForChild("showPetsEvent"):FireServer(unpack(args))
        end
    })

-- Set Size 2 Button
Tabs.Client:AddButton({
        Title = "Set Size 2",
        Description = "Set your size to 2.",
        Callback = function()
            local args = {
                [1] = "changeSize",
                [2] = "2"
            }
            game:GetService("ReplicatedStorage"):WaitForChild("rEvents"):WaitForChild("changeSpeedSizeRemote"):InvokeServer(unpack(args))
        end
    })

-- Set Size Nan Button
Tabs.Client:AddButton({
        Title = "Set Size Nan",
        Description = "Set your size to nan.",
        Callback = function()
            local args = {
                [1] = "changeSize",
                [2] = "nan"
            }
            game:GetService("ReplicatedStorage"):WaitForChild("rEvents"):WaitForChild("changeSpeedSizeRemote"):InvokeServer(unpack(args))
        end
    })

-- WalkSpeed Slider
Tabs.Client:AddSlider("WalkSpeed", {
        Title = "WalkSpeed",
        Description = "",
        Default = 500,
        Min = 1,
        Max = 500,
        Rounding = 1,
        Callback = function(Value)
            print("WalkSpeed was changed:", Value)
            game.Players.LocalPlayer.Character.Humanoid.WalkSpeed = Value
        end
    })

-- JumpPower Slider
Tabs.Client:AddSlider("JumpPower", {
        Title = "JumpPower",
        Description = "",
        Default = 36,
        Min = 0,
        Max = 1000,
        Rounding = 1,
        Callback = function(Value)
            print("JumpPower was changed:", Value)
            game.Players.LocalPlayer.Character.Humanoid.JumpPower = Value
        end
    })

-- Size Slider
Tabs.Client:AddSlider("Size", {
        Title = "Size",
        Description = "",
        Default = 2,
        Min = 1,
        Max = 100,
        Rounding = 1,
        Callback = function(Value)
            print("Size was changed:", Value)
            game.Players.LocalPlayer.Character.HumanoidRootPart.Size = Vector3.new(Value, Value, Value)
        end
    })

Tabs.AutoFarm:AddParagraph({
        Title = "Reps",
        Content = ""
    })

-- Auto Farm Toggle
local AutoFarmToggle = Tabs.AutoFarm:AddToggle("Auto Farm", {Title = "Turn this on before using the tools toggles", Default = false })

AutoFarmToggle:OnChanged(function(Value)
    if Value then
        while AutoFarmToggle.Value do
            local args = { [1] = "rep" }
            -- Fire the muscle event on the server
            game:GetService("Players").LocalPlayer:WaitForChild("muscleEvent"):FireServer(unpack(args))
            wait(0.1)  -- Adjust the wait time for frequency of the event firing
        end
    end
end)

Tabs.AutoFarm:AddParagraph({
        Title = "Tools",
        Content = ""
    })

-- Tool Usage Function
local function useTool(toolName, action)
    local tool = game.Players.LocalPlayer.Backpack:FindFirstChild(toolName)
    if tool then
        -- Simulate using the tool action (e.g., activating the tool)
        game:GetService("ReplicatedStorage"):WaitForChild("rEvents"):WaitForChild(action):FireServer()
        game.Players.LocalPlayer.Character:FindFirstChild("Humanoid"):SetStateEnabled(Enum.HumanoidStateType.Physics, false)
        wait() -- Adjust delay as needed
    else
        warn(toolName .. " tool not found")
    end
end

-- Auto Weight Toggle
local switchWeight = Tabs.AutoFarm:AddSwitch("Auto Weight", function(bool)
    _G.autoWeightUse = bool
    if bool then
        while _G.autoWeightUse do
            useTool("Weight", "useWeight")  -- Use the weight tool
        end
    else
        game.Players.LocalPlayer.Character:FindFirstChild("Humanoid"):SetStateEnabled(Enum.HumanoidStateType.Physics, true)
        _G.autoWeightUse = false
    end
end)

-- Auto Pushups Toggle
local switchPushups = Tabs.AutoFarm:AddSwitch("Auto Pushups", function(bool)
    _G.autoPushupsUse = bool
    if bool then
        while _G.autoPushupsUse do
            useTool("Pushups", "usePushups")  -- Use the pushups tool
        end
    else
        game.Players.LocalPlayer.Character:FindFirstChild("Humanoid"):SetStateEnabled(Enum.HumanoidStateType.Physics, true)
        _G.autoPushupsUse = false
    end
end)

-- Auto Handstands Toggle
local switchHandstands = Tabs.AutoFarm:AddSwitch("Auto Handstands", function(bool)
    _G.autoHandstandsUse = bool
    if bool then
        while _G.autoHandstandsUse do
            useTool("Handstands", "useHandstands")  -- Use the handstands tool
        end
    else
        game.Players.LocalPlayer.Character:FindFirstChild("Humanoid"):SetStateEnabled(Enum.HumanoidStateType.Physics, true)
        _G.autoHandstandsUse = false
    end
end)

-- Auto Situps Toggle
local switchSitups = Tabs.AutoFarm:AddSwitch("Auto Situps", function(bool)
    _G.autoSitupsUse = bool
    if bool then
        while _G.autoSitupsUse do
            useTool("Situps", "useSitups")  -- Use the situps tool
        end
    else
        game.Players.LocalPlayer.Character:FindFirstChild("Humanoid"):SetStateEnabled(Enum.HumanoidStateType.Physics, true)
        _G.autoSitupsUse = false
    end
end)
