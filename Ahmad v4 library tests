local NovaHub = loadstring(game:HttpGet("https://raw.githubusercontent.com/NovaHubOnTop/Private/refs/heads/main/Library"))()
local SaveManager = loadstring(game:HttpGet("https://raw.githubusercontent.com/dawid-scripts/Fluent/master/Addons/SaveManager.lua"))()
local InterfaceManager = loadstring(game:HttpGet("https://raw.githubusercontent.com/dawid-scripts/Fluent/master/Addons/InterfaceManager.lua"))()

local Window = NovaHub:CreateWindow({
    Title = "Nova Hub Paid Version" .. Fluent.Version,
    SubTitle = "by Encrypted",
    TabWidth = 160,
    Size = UDim2.fromOffset(580, 460),
    Acrylic = true,
    Theme = "NovaHub",
    MinimizeKey = Enum.KeyCode.LeftControl
})

local Tabs = {
    Home = Window:AddTab({ Title = "Home", Icon = "" }),
    AutoFarm = Window:AddTab({ Title = "Auto Farm", Icon = "settings" }),
    Eggs = Window:AddTab({ Title = "Eggs", Icon = "egg" }),
    Rebirthing = Window:AddTab({ Title = "Rebirthing", Icon = "" }),
    Teleports = Window:AddTab({ Title = "Teleports", Icon = "home" }),
    AutoRacing = Window:AddTab({ Title = "Auto Racing", Icon = "car" })
}

-- Rebirthing Tab
Tabs.Rebirthing:AddParagraph({
    Title = "Rebirth",
    Content = "Automatically rebirth once the target amount is reached."
})

-- Rebirth Target Input
local RebirthTargetInput = Tabs.Rebirthing:AddInput("RebirthTarget", {
    Title = "Rebirth Target",
    Default = "0",
    Placeholder = "Enter target number of rebirths",
    Numeric = true,
    Finished = true,
    Callback = function(Value) 
        print("Rebirth target input changed:", Value)
    end
})

RebirthTargetInput:OnChanged(function() end)

-- Auto Rebirth Toggle
local AutoRebirthToggle = Tabs.Rebirthing:AddToggle("Auto Rebirth", {
    Title = "Auto Rebirth",
    Default = false
})

AutoRebirthToggle:OnChanged(function()
    local rebirthTarget = tonumber(RebirthTargetInput.Value)
    if AutoRebirthToggle.Value then
        -- Continuously rebirth if Auto Rebirth is enabled
        while AutoRebirthToggle.Value do
            local currentRebirth = game.Players.LocalPlayer:FindFirstChild("Rebirths")
            if currentRebirth and currentRebirth.Value >= rebirthTarget then
                local args = {
                    [1] = "rebirthRequest"
                }
                -- Ensure the rebirth event exists before firing it
                local rebirthEvent = game:GetService("ReplicatedStorage"):WaitForChild("rEvents"):WaitForChild("rebirthEvent")
                if rebirthEvent then
                    rebirthEvent:FireServer(unpack(args))
                end
            end
            wait(0.1)  -- Repeat every 0.1 seconds
        end
    end
end)

-- Discord Server Button
Tabs.Home:AddButton({
    Title = "Discord Server",
    Description = "Copy discord server link",
    Callback = function()
        setclipboard("https://discord.gg/ztGskBVU")
    end
})

Tabs.Home:AddParagraph({
    Title = "Local Player",
    Content = ""
})

-- WalkSpeed Input
local WalkSpeedInput = Tabs.Home:AddInput("WalkSpeed", {
    Title = "WalkSpeed",
    Default = "16",
    Placeholder = "Enter WalkSpeed",
    Numeric = true,
    Finished = true,
    Callback = function(Value) end
})

WalkSpeedInput:OnChanged(function() end)

Tabs.Home:AddButton({
    Title = "Apply WalkSpeed",
    Description = "Apply the entered WalkSpeed",
    Callback = function()
        local walkSpeedValue = tonumber(WalkSpeedInput.Value)
        if walkSpeedValue then
            game.Players.LocalPlayer.Character.Humanoid.WalkSpeed = walkSpeedValue
        end
    end
})

-- JumpPower Input
local JumpPowerInput = Tabs.Home:AddInput("JumpPower", {
    Title = "JumpPower",
    Default = "50",
    Placeholder = "Enter JumpPower",
    Numeric = true,
    Finished = true,
    Callback = function(Value) end
})

JumpPowerInput:OnChanged(function() end)

Tabs.Home:AddButton({
    Title = "Apply JumpPower",
    Description = "Apply the entered JumpPower",
    Callback = function()
        local jumpPowerValue = tonumber(JumpPowerInput.Value)
        if jumpPowerValue then
            game.Players.LocalPlayer.Character.Humanoid.JumpPower = jumpPowerValue
        end
    end
})

-- AutoFarm Tab
Tabs.AutoFarm:AddParagraph({
    Title = "Auto Farming",
    Content = ""
})

local CityDropdown = Tabs.AutoFarm:AddDropdown("Select City", {
    Title = "Select City",
    Values = {"City", "Snow City", "Magma City", "Jungle City"},
    Multi = false,
    Default = 1
})
CityDropdown:SetValue("City")

local OrbDropdown = Tabs.AutoFarm:AddDropdown("Select Orb", {
    Title = "Select Orb",
    Values = {"Red Orb", "Orange Orb", "Blue Orb", "Yellow Orb", "Gems", "Ethereal Orb"},
    Multi = false,
    Default = 1
})
OrbDropdown:SetValue("Red Orb")

local FarmingModeDropdown = Tabs.AutoFarm:AddDropdown("Select Farming Mode", {
    Title = "Select Farming Mode",
    Values = {"Slow", "Normal", "Fast", "Super Fast"},
    Multi = false,
    Default = 1
})
FarmingModeDropdown:SetValue("Normal")

local Toggle = Tabs.AutoFarm:AddToggle("Start Farming", {Title = "Start Farming", Default = false})

Toggle:OnChanged(function()
    local city = CityDropdown.Value
    local orb = OrbDropdown.Value
    local farmingMode = FarmingModeDropdown.Value

    if Toggle.Value then
        local loopCount = farmingMode == "Normal" and 50 or farmingMode == "Fast" and 100 or 200
        while Toggle.Value do
            local args = { [1] = "collectOrb", [2] = orb, [3] = city }
            for i = 1, loopCount do
                game:GetService("ReplicatedStorage"):WaitForChild("rEvents"):WaitForChild("orbEvent"):FireServer(unpack(args))
            end
            wait(0.2)
        end
    end
end)

-- Anti Lag Button
Tabs.AutoFarm:AddButton({
    Title = "Anti Lag",
    Description = "Improves FPS by disabling certain features.",
    Callback = function()
        local decalsyeeted = true
        local g = game
        local w = g.Workspace
        local l = g.Lighting
        local t = w.Terrain
        t.WaterWaveSize = 0
        t.WaterWaveSpeed = 0
        t.WaterReflectance = 0
        t.WaterTransparency = 0
        l.GlobalShadows = false
        l.FogEnd = 9e9
        l.Brightness = 0
        settings().Rendering.QualityLevel = "Level01"
        
        for i, v in pairs(g:GetDescendants()) do
            if v:IsA("Part") or v:IsA("Union") or v:IsA("CornerWedgePart") or v:IsA("TrussPart") then
                v.Material = "Plastic"
                v.Reflectance = 0
            elseif v:IsA("Decal") or v:IsA("Texture") and decalsyeeted then
                v.Transparency = 1
            elseif v:IsA("ParticleEmitter") or v:IsA("Trail") then
                v.Lifetime = NumberRange.new(0)
            elseif v:IsA("Explosion") then
                v.BlastPressure = 1
                v.BlastRadius = 1
            elseif v:IsA("Fire") or v:IsA("SpotLight") or v:IsA("Smoke") then
                v.Enabled = false
            elseif v:IsA("MeshPart") then
                v.Material = "Plastic"
                v.Reflectance = 0
                v.TextureID = 10385902758728957
            end
        end
        
        for i, e in pairs(l:GetChildren()) do
            if e:IsA("BlurEffect") or e:IsA("SunRaysEffect") or e:IsA("ColorCorrectionEffect") or e:IsA("BloomEffect") or e:IsA("DepthOfFieldEffect") then
                e.Enabled = false
            end
        end
    end
})

-- Anti Kick Toggle
local AntiKickToggle = Tabs.AutoFarm:AddToggle("Anti Kick", {Title = "Anti Kick", Default = false})

AntiKickToggle:OnChanged(function()
    if AntiKickToggle.Value then
        -- Get the VirtualUser service
        local VirtualUser = game:GetService("VirtualUser")

        -- Prevent the player from being kicked due to idling
        game:GetService("Players").LocalPlayer.Idled:Connect(function()
            VirtualUser:Button2Down(Vector2.new(0, 0), workspace.CurrentCamera.CFrame)
            wait(1)
            VirtualUser:Button2Up(Vector2.new(0, 0), workspace.CurrentCamera.CFrame)
        end)
    end
end)

-- Auto Hoop Toggle
local AutoHoopToggle = Tabs.AutoFarm:AddToggle("Auto Hoop", {Title = "Auto Hoop", Default = false})

AutoHoopToggle:OnChanged(function()
    if AutoHoopToggle.Value then
        while AutoHoopToggle.Value do
            -- Find all parts named "hoop" or "Hoop" in the workspace
            for _, part in pairs(workspace:GetDescendants()) do
                if part:IsA("BasePart") and (part.Name:lower() == "hoop") then
                    -- Teleport the part to the middle of the player's character
                    local character = game.Players.LocalPlayer.Character
                    if character and character:FindFirstChild("HumanoidRootPart") then
                        part.CFrame = character.HumanoidRootPart.CFrame
                    end
                end
            end
            wait(0.1)
        end
    end
end)

-- Eggs Tab
local Dropdown = Tabs.Eggs:AddDropdown("Select Egg", {
    Title = "Select Egg",
    Values = {
        "Yellow Crystal", "Blue Crystal", "Red Crystal", "Lightning Crystal", 
        "Inferno Crystal", "Lava Crystal", "Snow Crystal", "Electro Legends Crystal", 
        "Space Crystal", "Alien Crystal", "Electro Crystal", "Desert Crystal", "Jungle Crystal"
    },
    Multi = false,
    Default = 1,
})

Dropdown:SetValue("Jungle Crystal")

Dropdown:OnChanged(function(Value)
end)

-- Toggle for Auto Eggs
local Toggle = Tabs.Eggs:AddToggle("Auto Eggs", {
    Title = "Auto Eggs",
    Default = false
})

Toggle:OnChanged(function()
    if Toggle.Value then
        -- Continuously open the selected egg every 0.1 seconds
        while Toggle.Value do
            local selectedEgg = Dropdown.Value
            local args = {
                [1] = "openCrystal",
                [2] = selectedEgg
            }

            game:GetService("ReplicatedStorage"):WaitForChild("rEvents"):WaitForChild("openCrystalRemote"):InvokeServer(unpack(args))
            
            wait(0.1)  -- Wait for 0.1 seconds before repeating
        end
    end
end)

-- Teleports Tab
Tabs.Teleports:AddButton({
    Title = "City",
    Description = "Teleport to City",
    Callback = function()
        game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = CFrame.new(-9684.84473, 60.6541595, 3093.29663)
    end
})

Tabs.Teleports:AddButton({
    Title = "Snow City",
    Description = "Teleport to Snow City",
    Callback = function()
        game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = CFrame.new(-9673.79102, 60.6541595, 3788.24927)
    end
})

Tabs.Teleports:AddButton({
    Title = "Magma City",
    Description = "Teleport to Magma City",
    Callback = function()
        game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = CFrame.new(-11053.1162, 218.589584, 4904.35938)
    end
})

Tabs.Teleports:AddButton({
    Title = "Legends Highway",
    Description = "Teleport to Legends Highway",
    Callback = function()
        game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = CFrame.new(-13097.0186, 218.589584, 5913.35889)
    end
})

Tabs.Teleports:AddButton({
    Title = "Space",
    Description = "Teleport to Space",
    Callback = function()
        game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = CFrame.new(-331.764069, 5.45415115, 585.201721)
    end
})

Tabs.Teleports:AddButton({
    Title = "Desert",
    Description = "Teleport to Desert",
    Callback = function()
        game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = CFrame.new(-9515.24805, 57.1541519, 1607.96765)
    end
})

-- Auto Racing Tab
local FillToggle = Tabs.AutoRacing:AddToggle("Auto Fill", {Title = "Auto Fill", Default = false})
local FinishToggle = Tabs.AutoRacing:AddToggle("Auto Finish Race", {Title = "Auto Finish Race", Default = false})

-- Auto Fill
FillToggle:OnChanged(function()
    if FillToggle.Value then
        while FillToggle.Value do
            local args = {
                [1] = "joinRace"
            }
            game:GetService("ReplicatedStorage"):WaitForChild("rEvents"):WaitForChild("raceEvent"):FireServer(unpack(args))
            wait(0.0001)
        end
    end
end)

-- Auto Finish Race
FinishToggle:OnChanged(function()
    if FinishToggle.Value then
        while FinishToggle.Value do
            game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = CFrame.new(1686.07495, 36.3147125, -5946.63428, -0.984812617, 0, 0.173621148, 0, 1, 0, -0.173621148, 0, -0.984812617)
            wait(0.1)
            game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = CFrame.new(48.3109131, 36.3147125, -8680.45312, -1, 0, 0, 0, 1, 0, 0, 0, -1)
            wait(0.1)
            game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = CFrame.new(1001.33118, 36.3147125, -10986.2178, -0.996191859, 0, -0.0871884301, 0, 1, 0, 0.0871884301, 0, -0.996191859)
            wait(0.1)
        end
    end
end)

local AutoRebirthToggle = Tabs.Rebirthing:AddToggle("Auto Rebirth", {
    Title = "Auto Rebirth",
    Default = false
})

AutoRebirthToggle:OnChanged(function()
    if AutoRebirthToggle.Value then
        while AutoRebirthToggle.Value do
            local rebirthEvent = game:GetService("ReplicatedStorage"):WaitForChild("rEvents"):WaitForChild("rebirthEvent")
            rebirthEvent:FireServer()  -- Fire the rebirth event
            wait(0.1)  -- Adjust the wait time if needed
        end
    end
end)
